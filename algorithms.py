# def multiple_letter_count(str):
#     dict = {}
#     for i in str:
#         if i in dict.keys():
#             dict[i] += 1
#         elif i not in dict.keys():
#             dict[i] = 1
#     return dict

# print(multiple_letter_count("Hello world"))

# 3
# You're given strings J representing the types of stones that are jewels, and S representing the stones you have.
# Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.
# The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive,
# so "a" is considered a different type of stone from "A".

# Example 1:
# Input: J = "aA", S = "aAAbbbb"
# Output: 3

# feel free to change these variables below
'''
j = 'Fast'
s = 'Fast and the Furious'

def num_jewels_in_stones(jewels, stones):
    counter = 0
    for letter in jewels:
        for index in stones:
            if letter == index:
                counter += 1
    print(counter)

num_jewels_in_stones("Fast", "Fast and the Furious")
'''
'''
4
write a function that accepts a string and tests if it is a palindrome
is_palindrome('testing') # False
is_palindrome('tacocat') # True
is_palindrome('hannah') # True
is_palindrome('robert') # False
is_palindrome('amanaplanacanalpanama') # True

input_string = input("Enter a word: ")
def is_palindrome(str):
    lower_string = str.lower()
    start_counter = 0
    end_counter = len(lower_string)-1
    while start_counter < end_counter:
        if lower_string[start_counter] != lower_string[end_counter]:
            return False
        elif lower_string[start_counter] == lower_string[end_counter]:
            start_counter += 1
            end_counter -= 1
    return True

print(is_palindrome(input_string))
'''
'''# 5
# write a function that accepts a list and a search term and returns the number
# of times the search term appears in the list
# frequency([1,2,3,4,4,4], 4) # 3
# frequency([True, False, True, True], False) # 1

def frequency(list, letter):
    pass 
'''
# 6
# write a function that accepts a list of numbers and returns the product of all
# even numbers of list
# multiply_even_numbers([2,3,4,5,6]) # 48
'''
def multiply_even_numbers(list):
    result = 1
    for i in list:
        if i % 2 == 0:
            result *= i
    if result == 1:
        print("no even numbers found")
    else:
        print(result)

multiply_even_numbers([3,5])
'''

# 9
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
# find the sum of the even-valued terms.

def sum_even_fib():
    fibo = [1, 2]
    n = 2
    result = 2
    while fibo[n - 1] < 4000000:
        fibo.append((fibo[n - 1]) + (fibo[n - 2]))
        n = len(fibo)
        #print(fibo)
        if fibo[n - 1] % 2 == 0:
            print(fibo[n - 1])
            result += fibo[n - 1]
            print("result = %d" % result)
    print(result)
sum_even_fib()